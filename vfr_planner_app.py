#!/usr/bin/env python3
"""
VFR Planner - Application principale

Outil de planification de vol VFR pour pilotes priv√©s
Projet MGA802-01 - √âcole Polytechnique de Montr√©al

Usage:
    python vfr_planner_app.py

Requirements:
    - Python 3.7+
    - tkinter (g√©n√©ralement inclus avec Python)
    - pandas
    - folium
    - requests
    - openpyxl
    - reportlab
    - pytz
"""

import sys
import os
import tkinter as tk
from tkinter import messagebox
import traceback

# Ajouter le r√©pertoire du projet au path Python
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)


def check_dependencies():
    """V√©rifier que toutes les d√©pendances requises sont install√©es"""
    required_modules = [
        ('tkinter', 'Interface graphique'),
        ('pandas', 'Manipulation de donn√©es'),
        ('folium', 'Cartes interactives'),
        ('requests', 'API m√©t√©o'),
        ('openpyxl', 'Export Excel'),
        ('reportlab', 'Export PDF'),
        ('pytz', 'Fuseaux horaires'),
        ('datetime', 'Gestion des dates'),
        ('json', 'S√©rialisation des donn√©es'),
        ('math', 'Calculs math√©matiques')
    ]

    missing_modules = []

    for module_name, description in required_modules:
        try:
            __import__(module_name)
            print(f"‚úÖ {module_name}: {description}")
        except ImportError:
            missing_modules.append((module_name, description))
            print(f"‚ùå {module_name}: {description} - MANQUANT")

    if missing_modules:
        print("\n‚ö†Ô∏è MODULES MANQUANTS:")
        print("Installez les modules manquants avec:")
        print("pip install pandas folium requests openpyxl reportlab pytz")
        return False

    print("\n‚úÖ Toutes les d√©pendances sont install√©es!")
    return True


def main():
    """Fonction principale de l'application"""
    print("=" * 60)
    print("VFR PLANNER - Outil de planification de vol VFR")
    print("Projet MGA802-01 - √âcole Polytechnique de Montr√©al")
    print("=" * 60)

    # V√©rifier les d√©pendances
    print("V√©rification des d√©pendances...")
    if not check_dependencies():
        print("\n‚ùå Impossible de d√©marrer l'application.")
        print("Installez les modules manquants et relancez l'application.")
        input("Appuyez sur Entr√©e pour quitter...")
        return 1

    try:
        # Importer les modules de l'application
        print("\nInitialisation de l'application...")
        from vfr_planner.gui.main_window import VFRPlannerGUI

        # Cr√©er la fen√™tre principale Tkinter
        root = tk.Tk()

        # Configurer l'ic√¥ne de l'application (si disponible)
        try:
            icon_path = os.path.join(PROJECT_ROOT, "resources", "icon.ico")
            if os.path.exists(icon_path):
                root.iconbitmap(icon_path)
        except Exception:
            pass  # Ignorer si probl√®me avec l'ic√¥ne

        # Cr√©er l'application
        app = VFRPlannerGUI(root)

        print("‚úÖ Application initialis√©e avec succ√®s!")
        print("\nüöÄ D√©marrage de l'interface graphique...")
        print("üìù Utilisez Ctrl+N pour cr√©er un nouveau plan de vol")
        print("üìñ Consultez le menu Aide > Guide d'utilisation pour d√©buter")
        print("\nPour fermer l'application, utilisez Ctrl+Q ou fermez la fen√™tre.")

        # D√©marrer la boucle principale de l'interface
        root.mainloop()

        print("\nüëã Merci d'avoir utilis√© VFR Planner!")
        return 0

    except ImportError as e:
        error_msg = f"Erreur d'importation: {e}"
        print(f"\n‚ùå {error_msg}")

        # Afficher un message d'erreur graphique si possible
        try:
            root = tk.Tk()
            root.withdraw()  # Cacher la fen√™tre principale
            messagebox.showerror(
                "Erreur VFR Planner",
                f"Impossible de charger l'application:\n\n{error_msg}\n\n"
                "V√©rifiez que tous les fichiers du projet sont pr√©sents."
            )
        except Exception:
            pass

        return 1

    except Exception as e:
        error_msg = f"Erreur inattendue: {e}"
        print(f"\n‚ùå {error_msg}")
        print(f"Traceback:\n{traceback.format_exc()}")

        # Afficher un message d'erreur graphique si possible
        try:
            root = tk.Tk()
            root.withdraw()
            messagebox.showerror(
                "Erreur VFR Planner",
                f"Erreur lors du d√©marrage:\n\n{error_msg}\n\n"
                "Consultez la console pour plus de d√©tails."
            )
        except Exception:
            pass

        return 1


def create_desktop_shortcut():
    """Cr√©er un raccourci sur le bureau (Windows seulement)"""
    if sys.platform != "win32":
        print("Cr√©ation de raccourci disponible seulement sur Windows")
        return

    try:
        import winshell
        from win32com.client import Dispatch

        desktop = winshell.desktop()
        path = os.path.join(desktop, "VFR Planner.lnk")
        target = sys.executable
        wdir = PROJECT_ROOT
        arguments = os.path.join(PROJECT_ROOT, "vfr_planner_app.py")

        shell = Dispatch('WScript.Shell')
        shortcut = shell.CreateShortCut(path)
        shortcut.Targetpath = target
        shortcut.Arguments = arguments
        shortcut.WorkingDirectory = wdir
        shortcut.Description = "VFR Planner - Outil de planification de vol"
        shortcut.save()

        print(f"‚úÖ Raccourci cr√©√©: {path}")

    except ImportError:
        print("Pour cr√©er un raccourci, installez: pip install winshell pywin32")
    except Exception as e:
        print(f"Erreur cr√©ation raccourci: {e}")


if __name__ == "__main__":
    # V√©rifier les arguments de ligne de commande
    if len(sys.argv) > 1:
        if sys.argv[1] in ["-h", "--help"]:
            print(__doc__)
            sys.exit(0)
        elif sys.argv[1] == "--create-shortcut":
            create_desktop_shortcut()
            sys.exit(0)
        elif sys.argv[1] == "--check-deps":
            check_dependencies()
            sys.exit(0)

    # D√©marrer l'application
    exit_code = main()

    # Pause avant fermeture en cas d'erreur (pour voir les messages)
    if exit_code != 0:
        try:
            input("\nAppuyez sur Entr√©e pour quitter...")
        except (EOFError, KeyboardInterrupt):
            pass

    sys.exit(exit_code)