"""
Base de donn√©es d'a√©roports pour la planification VFR
"""

import pandas as pd
import os
from typing import List, Dict, Optional


class AirportDatabase:
    """
    Gestionnaire de la base de donn√©es d'a√©roports.

    Permet de charger une base CSV d'a√©roports ou d'utiliser un jeu de secours.
    G√®re le nettoyage, les filtres (pays, types, codes ICAO/IATA), et fournit une liste d‚Äôa√©roports exploitables
    pour les op√©rations de planification de vol.
    """

    def __init__(self, csv_path: Optional[str] = None):
        """
        Initialiser la base de donn√©es d'a√©roports.

        Si aucun chemin CSV n'est fourni, plusieurs chemins par d√©faut sont essay√©s.

        :param csv_path: Chemin vers le fichier CSV d'a√©roports (optionnel)
        :type csv_path: Optional[str]
        """
        # Chemins possibles pour le fichier CSV
        if csv_path is None:
            possible_paths = [
                os.path.join(os.path.dirname(__file__), "airports.csv"),
                os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "airports.csv"),
                "airports.csv"
            ]
            csv_path = None
            for path in possible_paths:
                if os.path.exists(path):
                    csv_path = path
                    break

        self.csv_path = csv_path
        self.airports_df = None
        self.filtered_airports = None
        self.current_filters = {
            'countries': [],
            'types': [],
            'icao_only': False,
            'iata_only': False
        }

        self.load_airports()

    def load_airports(self):
        """
        Charger la base de donn√©es d'a√©roports depuis un fichier CSV ou cr√©er des donn√©es de secours.

        Cette m√©thode tente de lire les donn√©es CSV, puis applique un nettoyage et des filtres par d√©faut :
        - Pays : CA, US
        - Types : non filtr√©s
        - ICAO/IATA : non filtr√©s

        En cas d'erreur de chargement, un jeu de 9 a√©roports standards est utilis√©.
        """
        try:
            if self.csv_path and os.path.exists(self.csv_path):
                print(f"Chargement de la base de donn√©es: {self.csv_path}")
                self.airports_df = pd.read_csv(self.csv_path)
                self._clean_data()
                print(f"Base de donn√©es charg√©e: {len(self.airports_df)} a√©roports")
            else:
                print("Fichier CSV non trouv√©, utilisation des donn√©es de base")
                self._create_fallback_data()

            # Appliquer filtres par d√©faut
            self.current_filters = {
                'countries': ['CA', 'US'],
                'types': [],
                'icao_only': False,
                'iata_only': False
            }
            self.apply_filters()

        except Exception as e:
            print(f"Erreur lors du chargement: {e}")
            self._create_fallback_data()

    def _clean_data(self):
        """
        Nettoyer et normaliser les donn√©es brutes du fichier CSV.

        - Mise en majuscule et nettoyage des codes (ICAO, IATA, etc.)
        - Remplissage des valeurs manquantes dans les champs textes
        - Conversion des coordonn√©es en types num√©riques
        - Suppression des lignes sans coordonn√©es valides
        """
        # Nettoyer les codes
        for col in ['icao_code', 'iata_code', 'ident', 'local_code', 'gps_code']:
            if col in self.airports_df.columns:
                self.airports_df[col] = self.airports_df[col].fillna('').str.upper().str.strip()

        # Nettoyer les textes
        for col in ['name', 'municipality']:
            if col in self.airports_df.columns:
                self.airports_df[col] = self.airports_df[col].fillna('Unknown')

        # S'assurer que les coordonn√©es sont num√©riques
        for col in ['latitude_deg', 'longitude_deg']:
            if col in self.airports_df.columns:
                self.airports_df[col] = pd.to_numeric(self.airports_df[col], errors='coerce')

        # Supprimer les lignes avec coordonn√©es invalides
        self.airports_df = self.airports_df.dropna(subset=['latitude_deg', 'longitude_deg'])

    def _create_fallback_data(self):
        """
        Cr√©er des donn√©es de base si le fichier CSV n'est pas trouv√©.

        Ce jeu comprend 9 a√©roports canadiens et am√©ricains de r√©f√©rence.

        :return: None
        """
        fallback_data = {
            'ident': ['CYUL', 'CYQB', 'CYOW', 'CYYC', 'CYVR', 'CYYZ', 'KBOS', 'KJFK', 'CSE4'],
            'icao_code': ['CYUL', 'CYQB', 'CYOW', 'CYYC', 'CYVR', 'CYYZ', 'KBOS', 'KJFK', ''],
            'iata_code': ['YUL', 'YQB', 'YOW', 'YYC', 'YVR', 'YYZ', 'BOS', 'JFK', ''],
            'local_code': ['', '', '', '', '', '', '', '', 'CSE4'],
            'gps_code': ['', '', '', '', '', '', '', '', 'CSE4'],
            'name': ['Montreal Trudeau', 'Quebec Jean Lesage', 'Ottawa Macdonald-Cartier',
                     'Calgary', 'Vancouver', 'Toronto Pearson', 'Boston Logan', 'New York JFK', 'Saint-Esprit'],
            'latitude_deg': [45.458, 46.791, 45.323, 51.114, 49.194, 43.677, 42.364, 40.640, 45.9],
            'longitude_deg': [-73.749, -71.393, -75.669, -114.019, -123.184, -79.631, -71.005, -73.779, -73.6],
            'municipality': ['Montreal', 'Quebec', 'Ottawa', 'Calgary', 'Vancouver', 'Toronto', 'Boston', 'New York',
                             'Saint-Esprit'],
            'iso_country': ['CA', 'CA', 'CA', 'CA', 'CA', 'CA', 'US', 'US', 'CA'],
            'type': ['large_airport', 'large_airport', 'large_airport', 'large_airport', 'large_airport',
                     'large_airport', 'large_airport', 'large_airport', 'small_airport']
        }

        self.airports_df = pd.DataFrame(fallback_data)
        print("Utilisation des donn√©es de base (9 a√©roports)")

    def apply_filters(self):
        """
        Appliquer les filtres actuels d√©finis sur la base d'a√©roports.

        Les filtres incluent :

        - ``countries`` : Liste de codes pays (ISO 3166-1 alpha-2) √† inclure
        - ``types`` : Types d‚Äôa√©roports √† retenir (ex: ``small_airport``, ``large_airport``)
        - ``icao_only`` : Si vrai, ne garder que les a√©roports avec un code ICAO
        - ``iata_only`` : Si vrai, ne garder que les a√©roports avec un code IATA

        Met √† jour l‚Äôattribut ``filtered_airports``, un DataFrame avec colonne ``display_name``.
        """
        if self.airports_df is None:
            return

        filtered_df = self.airports_df.copy()

        # Filtre par pays
        if self.current_filters['countries']:
            filtered_df = filtered_df[filtered_df['iso_country'].isin(self.current_filters['countries'])]

        # Filtre par type
        if self.current_filters['types']:
            filtered_df = filtered_df[filtered_df['type'].isin(self.current_filters['types'])]

        # Filtre ICAO seulement
        if self.current_filters['icao_only']:
            filtered_df = filtered_df[filtered_df['icao_code'] != '']

        # Filtre IATA seulement
        if self.current_filters['iata_only']:
            filtered_df = filtered_df[filtered_df['iata_code'] != '']

        self.filtered_airports = filtered_df.copy()
        self.filtered_airports['display_name'] = self._create_display_names(self.filtered_airports)

        print(f"Filtres appliqu√©s: {len(self.filtered_airports)} a√©roports retenus")

    def _create_display_names(self, df):
        """
        Cr√©er les noms d'affichage pour les a√©roports.

        Chaque nom est construit en priorisant les codes dans l'ordre : ICAO, IATA, ident, local_code.
        Le nom inclut aussi la municipalit√© et le pays si disponibles, ainsi qu'un indicateur visuel
        pour le type de code (üîµ ICAO, üü° IATA, üü¢ autre).

        :param df: DataFrame contenant les donn√©es des a√©roports
        :type df: pd.DataFrame
        :return: Liste des noms d'affichage format√©s
        :rtype: List[str]
        """
        display_names = []
        for _, row in df.iterrows():
            # Prioriser: ICAO > IATA > ident > local_code
            code = (row.get('icao_code', '') if row.get('icao_code', '') else
                    row.get('iata_code', '') if row.get('iata_code', '') else
                    row.get('ident', '') if row.get('ident', '') else
                    row.get('local_code', '') if row.get('local_code', '') else
                    f"ID{row.get('id', 'Unknown')}")

            name = f"{code} - {row.get('name', 'Unknown')}"
            if row.get('municipality') and row.get('municipality') != 'Unknown':
                name += f" ({row['municipality']})"
            if row.get('iso_country'):
                name += f" [{row['iso_country']}]"

            # Indicateur du type de code
            if row.get('icao_code'):
                name += " üîµ"  # ICAO
            elif row.get('iata_code'):
                name += " üü°"  # IATA
            else:
                name += " üü¢"  # Local/GPS

            display_names.append(name)
        return display_names

    def search_airports(self, query: str, max_results: int = 20) -> List[Dict]:
        """
        Rechercher des a√©roports dans la base filtr√©e.

        La recherche est insensible √† la casse et porte sur plusieurs colonnes :
        codes ICAO, IATA, ident, local_code, gps_code, nom et municipalit√©.

        :param query: Terme de recherche (code ou texte)
        :type query: str
        :param max_results: Nombre maximum de r√©sultats √† retourner
        :type max_results: int
        :return: Liste des a√©roports correspondants sous forme de dictionnaires
        :rtype: List[Dict]
        """
        if self.filtered_airports is None or not query:
            return []

        query = query.upper().strip()

        # Recherche dans toutes les colonnes pertinentes
        mask = (
                self.filtered_airports['icao_code'].str.match(query, na=False) |
                self.filtered_airports['iata_code'].str.match(query, na=False) |
                self.filtered_airports['ident'].str.match(query, na=False) |
                self.filtered_airports['local_code'].str.match(query, na=False) |
                self.filtered_airports['gps_code'].str.match(query, na=False) |
                self.filtered_airports['name'].str.upper().str.match(query, na=False) |
                self.filtered_airports['municipality'].str.upper().str.match(query, na=False)
        )

        results = self.filtered_airports[mask].head(max_results)

        return [self._row_to_dict(row) for _, row in results.iterrows()]

    def get_airport_by_code(self, code: str) -> Optional[Dict]:
        """
        Obtenir un a√©roport via un code unique (ICAO, IATA, ident, local_code ou gps_code).

        :param code: Code d'a√©roport recherch√©
        :type code: str
        :return: Dictionnaire repr√©sentant l'a√©roport, ou None si aucun r√©sultat
        :rtype: Optional[Dict]
        """
        if self.filtered_airports is None:
            return None

        code = code.upper().strip()
        match = self.filtered_airports[
            (self.filtered_airports['icao_code'] == code) |
            (self.filtered_airports['iata_code'] == code) |
            (self.filtered_airports['ident'] == code) |
            (self.filtered_airports['local_code'] == code) |
            (self.filtered_airports['gps_code'] == code)
            ]

        if not match.empty:
            return self._row_to_dict(match.iloc[0])
        return None

    def _row_to_dict(self, row) -> Dict:
        """
        Convertit une ligne de DataFrame en dictionnaire.

        :param row: Ligne du DataFrame contenant les donn√©es d'un a√©roport.
        :type row: dict-like
        :return: Dictionnaire avec les informations extraites de la ligne.
        :rtype: Dict
        """
        return {
            'icao': row.get('icao_code', '') if row.get('icao_code', '') else row.get('ident', ''),
            'iata': row.get('iata_code', ''),
            'ident': row.get('ident', ''),
            'local_code': row.get('local_code', ''),
            'gps_code': row.get('gps_code', ''),
            'name': row.get('name', 'Unknown'),
            'city': row.get('municipality', 'Unknown'),
            'country': row.get('iso_country', ''),
            'type': row.get('type', 'unknown'),
            'lat': float(row.get('latitude_deg', 0)),
            'lon': float(row.get('longitude_deg', 0)),
            'elevation': float(row.get('elevation_ft', 0)) if 'elevation_ft' in row and pd.notna(
                row.get('elevation_ft')) else 0,
            'display': row.get('display_name', str(row.get('ident', 'Unknown')))
        }

    def get_available_countries(self) -> List[str]:
        """
        Obtient la liste des pays disponibles dans le DataFrame des a√©roports.

        :return: Liste tri√©e des codes pays ISO uniques.
        :rtype: List[str]
        """
        if self.airports_df is None:
            return []
        return sorted(self.airports_df['iso_country'].dropna().unique())

    def get_available_types(self) -> List[str]:
        """
        Obtient la liste des types d'a√©roports disponibles dans le DataFrame.

        :return: Liste tri√©e des types uniques d'a√©roports.
        :rtype: List[str]
        """
        if self.airports_df is None:
            return []
        return sorted(self.airports_df['type'].dropna().unique())

    def update_filters(self, countries=None, types=None, icao_only=None, iata_only=None):
        """
        Met √† jour les filtres appliqu√©s sur les a√©roports et applique les nouveaux filtres.

        :param countries: Liste des codes pays ISO √† filtrer, defaults to None
        :type countries: list or None
        :param types: Liste des types d'a√©roports √† filtrer, defaults to None
        :type types: list or None
        :param icao_only: Filtrer uniquement les a√©roports avec code ICAO, defaults to None
        :type icao_only: bool or None
        :param iata_only: Filtrer uniquement les a√©roports avec code IATA, defaults to None
        :type iata_only: bool or None
        """
        if countries is not None:
            self.current_filters['countries'] = countries
        if types is not None:
            self.current_filters['types'] = types
        if icao_only is not None:
            self.current_filters['icao_only'] = icao_only
        if iata_only is not None:
            self.current_filters['iata_only'] = iata_only

        self.apply_filters()

    def reset_filters(self):
        """
        R√©initialise tous les filtres aux valeurs par d√©faut et applique ces filtres.

        :return: None
        """
        self.current_filters = {
            'countries': [],
            'types': [],
            'icao_only': False,
            'iata_only': False
        }
        self.apply_filters()

    def get_filter_stats(self) -> Dict:
        """
        Obtenir des statistiques sur les filtres appliqu√©s aux a√©roports.

        :return: Dictionnaire contenant le nombre total d'a√©roports, le nombre filtr√© et le pourcentage filtr√©.
        :rtype: Dict[str, int or float]
        """
        total = len(self.airports_df) if self.airports_df is not None else 0
        filtered = len(self.filtered_airports) if self.filtered_airports is not None else 0
        return {
            'total': total,
            'filtered': filtered,
            'percentage': (filtered / total * 100) if total > 0 else 0
        }

    def get_airports_near_point(self, lat: float, lon: float, radius_nm: float = 50) -> List[Dict]:
        """
        Obtenir les a√©roports situ√©s dans un rayon donn√© autour d'un point g√©ographique.

        :param lat: Latitude du point de r√©f√©rence.
        :type lat: float
        :param lon: Longitude du point de r√©f√©rence.
        :type lon: float
        :param radius_nm: Rayon de recherche en milles nautiques, par d√©faut 50.
        :type radius_nm: float, optional
        :return: Liste des a√©roports sous forme de dictionnaires situ√©s dans le rayon sp√©cifi√©.
        :rtype: List[Dict]
        """
        if self.filtered_airports is None:
            return []

        from ..calculations.navigation import calculate_distance

        nearby_airports = []
        for _, row in self.filtered_airports.iterrows():
            distance = calculate_distance(lat, lon, row['latitude_deg'], row['longitude_deg'])
            if distance <= radius_nm:
                airport_dict = self._row_to_dict(row)
                airport_dict['distance'] = distance
                nearby_airports.append(airport_dict)

        # Trier par distance
        nearby_airports.sort(key=lambda x: x['distance'])
        return nearby_airports

    def get_airports_by_type(self, airport_type: str) -> List[Dict]:
        """
        Obtenir la liste des a√©roports correspondant √† un type donn√©.

        :param airport_type: Type d'a√©roport √† filtrer.
        :type airport_type: str
        :return: Liste des a√©roports du type sp√©cifi√© sous forme de dictionnaires.
        :rtype: List[Dict]
        """
        if self.filtered_airports is None:
            return []

        matching = self.filtered_airports[self.filtered_airports['type'] == airport_type]
        return [self._row_to_dict(row) for _, row in matching.iterrows()]

    def export_filtered_airports(self, filename: str):
        """
        Exporter les a√©roports filtr√©s vers un fichier CSV.

        :param filename: Nom du fichier de sortie.
        :type filename: str
        """
        if self.filtered_airports is not None:
            self.filtered_airports.to_csv(filename, index=False)
            print(f"A√©roports export√©s vers {filename}")

    def get_statistics(self) -> Dict:
        """
        Obtenir des statistiques d√©taill√©es sur la base de donn√©es des a√©roports.

        :return: Dictionnaire contenant diverses statistiques.
        :rtype: Dict[str, int or dict]
        """
        if self.airports_df is None:
            return {}

        stats = {
            'total_airports': len(self.airports_df),
            'filtered_airports': len(self.filtered_airports) if self.filtered_airports is not None else 0,
            'countries': len(self.airports_df['iso_country'].unique()),
            'types': len(self.airports_df['type'].unique()),
            'with_icao': len(self.airports_df[self.airports_df['icao_code'] != '']),
            'with_iata': len(self.airports_df[self.airports_df['iata_code'] != '']),
        }

        # Statistiques par pays
        country_counts = self.airports_df['iso_country'].value_counts().head(10)
        stats['top_countries'] = country_counts.to_dict()

        # Statistiques par type
        type_counts = self.airports_df['type'].value_counts()
        stats['type_distribution'] = type_counts.to_dict()

        return stats

    def __len__(self) -> int:
        """
        Nombre d'a√©roports filtr√©s.

        :return: Nombre d'a√©roports dans la liste filtr√©e.
        :rtype: int
        """
        """Nombre d'a√©roports filtr√©s"""
        return len(self.filtered_airports) if self.filtered_airports is not None else 0

    def __str__(self) -> str:
        """
        Repr√©sentation en cha√Æne de caract√®res de l'objet, affichant le nombre d'a√©roports filtr√©s.

        :return: Cha√Æne descriptive.
        :rtype: str
        """
        stats = self.get_filter_stats()
        return f"AirportDatabase: {stats['filtered']} / {stats['total']} a√©roports"

    def __repr__(self) -> str:
        """
        Repr√©sentation officielle de l'objet.

        :return: Cha√Æne repr√©sentant l'objet avec chemin CSV et nombre d'a√©roports.
        :rtype: str
        """
        return f"AirportDatabase(csv_path='{self.csv_path}', airports={len(self)})"


# Instance globale pour faciliter l'utilisation
airport_db = AirportDatabase()


# Fonctions utilitaires export√©es
def search_airports(query: str, max_results: int = 20) -> List[Dict]:
    """
    Rechercher des a√©roports par cha√Æne de caract√®res.

    :param query: Terme de recherche.
    :type query: str
    :param max_results: Nombre maximum de r√©sultats √† retourner, par d√©faut 20.
    :type max_results: int, optional
    :return: Liste des a√©roports correspondant √† la recherche.
    :rtype: List[Dict]
    """
    return airport_db.search_airports(query, max_results)


def get_airport_by_code(code: str) -> Optional[Dict]:
    """
    Obtenir un a√©roport par son code ICAO ou IATA.

    :param code: Code ICAO ou IATA de l'a√©roport.
    :type code: str
    :return: Dictionnaire contenant les informations de l'a√©roport, ou None si non trouv√©.
    :rtype: Optional[Dict]
    """
    return airport_db.get_airport_by_code(code)


def get_airports_near(lat: float, lon: float, radius_nm: float = 50) -> List[Dict]:
    """
    Obtenir la liste des a√©roports proches d‚Äôun point g√©ographique.

    :param lat: Latitude du point.
    :type lat: float
    :param lon: Longitude du point.
    :type lon: float
    :param radius_nm: Rayon de recherche en milles nautiques, par d√©faut 50.
    :type radius_nm: float, optional
    :return: Liste des a√©roports proches.
    :rtype: List[Dict]
    """
    return airport_db.get_airports_near_point(lat, lon, radius_nm)