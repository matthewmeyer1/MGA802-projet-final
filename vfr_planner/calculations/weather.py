"""
Service m√©t√©orologique pour la planification VFR
"""

import datetime
import requests
import json
from typing import Dict, Any, Optional, Tuple
import math

from ..models.waypoint import Waypoint


class WeatherService:
    """
    Service pour obtenir les donn√©es m√©t√©orologiques √† partir de Tomorrow.io

    :param api_key: Cl√© API pour l'acc√®s au service Tomorrow.io
    :type api_key: Optional[str]
    """

    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key
        self.base_url = "https://api.tomorrow.io/v4"
        self.timeout = 10

        # Cache pour √©viter les appels r√©p√©t√©s
        self._cache = {}
        self._cache_duration = 3600  # 1 heure

    def set_api_key(self, api_key: str):
        """
        D√©finir ou mettre √† jour la cl√© API utilis√©e pour acc√©der au service Tomorrow.io.

        :param api_key: Nouvelle cl√© API
        :type api_key: str
        """
        self.api_key = api_key

    def get_weather_for_leg(self, start_wp: Waypoint, end_wp: Waypoint,
                           start_time: datetime.datetime) -> Dict[str, Any]:
        """
        Obtenir la m√©t√©o pour un segment de vol avec un timing pr√©cis.

        La position utilis√©e est le centre g√©ographique du segment entre `start_wp` et `end_wp`.
        Les r√©sultats peuvent √™tre mis en cache pour √©viter des appels redondants √† l‚ÄôAPI.

        :param start_wp: Waypoint de d√©part
        :type start_wp: Waypoint
        :param end_wp: Waypoint d'arriv√©e
        :type end_wp: Waypoint
        :param start_time: Heure exacte pour laquelle r√©cup√©rer les conditions m√©t√©o
        :type start_time: datetime.datetime

        :raises ValueError: Si la cl√© API n‚Äôest pas d√©finie
        :raises Exception: En cas d‚Äôerreur lors de la r√©cup√©ration m√©t√©o

        :return: Dictionnaire contenant les donn√©es m√©t√©o, incluant la direction et la vitesse du vent
        :rtype: Dict[str, Any]
        """
        try:
            if not self.api_key:
                raise ValueError("Cl√© API Tomorrow.io requise")

            # Utiliser le centre du segment pour la m√©t√©o
            center_lat = (start_wp.lat + end_wp.lat) / 2
            center_lon = (start_wp.lon + end_wp.lon) / 2

            print(f"      üå§Ô∏è R√©cup√©ration m√©t√©o:")
            print(f"         Position: {center_lat:.4f}, {center_lon:.4f} (centre du leg)")
            print(f"         Heure: {start_time.strftime('%Y-%m-%d %H:%M:%S UTC')}")

            # V√©rifier le cache avec timing pr√©cis
            cache_key = f"{center_lat:.3f},{center_lon:.3f},{start_time.strftime('%Y%m%d%H%M')}"
            if cache_key in self._cache:
                cached_data, cache_time = self._cache[cache_key]
                cache_age = (datetime.datetime.now() - cache_time).seconds
                if cache_age < self._cache_duration:
                    print(f"         üìã Cache hit (√¢ge: {cache_age}s)")
                    return cached_data

            # Faire l'appel API
            print(f"         üåê Appel API Tomorrow.io...")
            weather_data = self._fetch_tomorrow_io_weather(center_lat, center_lon, start_time)

            # Mettre en cache avec timing pr√©cis
            self._cache[cache_key] = (weather_data, datetime.datetime.now())

            print(f"         ‚úÖ M√©t√©o r√©cup√©r√©e: {weather_data['wind_direction']:.0f}¬∞/{weather_data['wind_speed']:.0f}kn")

            return weather_data

        except Exception as e:
            print(f"         ‚ùå Erreur m√©t√©o: {e}")
            return self._get_default_weather()

    def _fetch_tomorrow_io_weather(self, lat: float, lon: float,
                                   start_time: datetime.datetime) -> Dict[str, Any]:
        """
        R√©cup√©rer les donn√©es m√©t√©orologiques depuis Tomorrow.io pour une position et une heure donn√©es.

        Cette m√©thode effectue un appel √† l'API Tomorrow.io, puis recherche dans la r√©ponse
        l'heure correspondant le mieux √† `start_time`. Si aucun match exact n'est trouv√©,
        elle retourne la valeur la plus proche ou la premi√®re disponible.

        :param lat: Latitude du point d'int√©r√™t
        :type lat: float
        :param lon: Longitude du point d'int√©r√™t
        :type lon: float
        :param start_time: Date et heure pour lesquelles la m√©t√©o est requise
        :type start_time: datetime.datetime

        :raises Exception: Si aucune donn√©e horaire n'est disponible dans la r√©ponse API

        :return: Dictionnaire des donn√©es m√©t√©o format√©es
        :rtype: Dict[str, Any]
        """
        url = f"{self.base_url}/weather/forecast"
        params = {
            "location": f"{lat},{lon}",
            "timesteps": "hourly",
            "apikey": self.api_key,
            "fields": [
                "windSpeed",
                "windDirection",
                "temperature",
                "visibility",
                "cloudCover",
                "precipitationIntensity",
                "weatherCode"
            ]
        }

        headers = {
            "accept": "application/json",
            "accept-encoding": "deflate, gzip, br"
        }

        response = requests.get(url, headers=headers, params=params, timeout=self.timeout)
        response.raise_for_status()

        data = response.json()

        # Convertir start_time en format API (arrondi √† l'heure)
        target_hour = start_time.replace(minute=0, second=0, microsecond=0)
        target_time = target_hour.strftime("%Y-%m-%dT%H:00:00Z")

        print(f"         üïê Recherche donn√©es pour: {target_time}")

        # Chercher l'heure exacte ou la plus proche
        best_match = None
        min_time_diff = float('inf')

        for hour_data in data["timelines"]["hourly"]:
            api_time_str = hour_data["time"]
            if api_time_str.endswith('Z'):
                api_time_str = api_time_str[:-1] + '+00:00'
            hour_time = datetime.datetime.fromisoformat(api_time_str)

            time_diff = abs((hour_time - target_hour).total_seconds())

            if time_diff < min_time_diff:
                min_time_diff = time_diff
                best_match = hour_data

            if hour_data["time"] == target_time:
                print(f"         üéØ Match exact trouv√©: {target_time}")
                return self._parse_tomorrow_io_data(hour_data)

        if best_match:
            time_diff_hours = min_time_diff / 3600
            print(f"         üìç Meilleur match: {best_match['time']} (√©cart: {time_diff_hours:.1f}h)")
            return self._parse_tomorrow_io_data(best_match)

        if data["timelines"]["hourly"]:
            first_hour = data["timelines"]["hourly"][0]
            print(f"         ‚ö†Ô∏è Utilisation premi√®re heure disponible: {first_hour['time']}")
            return self._parse_tomorrow_io_data(first_hour)

        raise Exception("Aucune donn√©e m√©t√©o disponible")

    def _parse_tomorrow_io_data(self, hour_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Extraire et transformer les donn√©es m√©t√©orologiques d'une heure donn√©e fournies par Tomorrow.io.

        Les unit√©s sont converties si n√©cessaire (par exemple, m/s -> knots pour le vent).

        :param hour_data: Donn√©es brutes pour une heure donn√©e depuis l‚ÄôAPI Tomorrow.io
        :type hour_data: Dict[str, Any]

        :return: Dictionnaire contenant les valeurs m√©t√©o normalis√©es
        :rtype: Dict[str, Any]
        """
        values = hour_data["values"]

        parsed_data = {
            'time': hour_data["time"],
            'wind_direction': values.get("windDirection", 270),
            'wind_speed': values.get("windSpeed", 15) * 1.943844,  # m/s -> knots
            'temperature': values.get("temperature", 15),  # Celsius
            'visibility': values.get("visibility", 10),  # km
            'cloud_cover': values.get("cloudCover", 20),  # %
            'precipitation': values.get("precipitationIntensity", 0),  # mm/h
            'weather_code': values.get("weatherCode", 1000),
            'source': 'Tomorrow.io API',
            'api_timestamp': datetime.datetime.now().isoformat()
        }

        print(
            f"         üìä Donn√©es pars√©es: Vent {parsed_data['wind_direction']:.0f}¬∞/{parsed_data['wind_speed']:.0f}kn, "
            f"Temp {parsed_data['temperature']:.0f}¬∞C, Vis {parsed_data['visibility']:.0f}km")

        return parsed_data

    def _get_default_weather(self) -> Dict[str, Any]:
        """
        Fournir un jeu de donn√©es m√©t√©o par d√©faut en cas d'√©chec de l‚Äôappel √† l‚ÄôAPI.

        Ces valeurs peuvent √™tre utilis√©es comme solution de repli pour assurer la continuit√© du traitement.

        :return: Dictionnaire contenant des valeurs m√©t√©o par d√©faut
        :rtype: Dict[str, Any]
        """
        default_data = {
            'time': datetime.datetime.now().isoformat(),
            'wind_direction': 270,  # Vent d'ouest
            'wind_speed': 15,  # 15 knots
            'temperature': 15,
            'visibility': 10,
            'cloud_cover': 25,
            'precipitation': 0,
            'weather_code': 1000,
            'source': 'Default values (API error)',
            'api_timestamp': datetime.datetime.now().isoformat()
        }

        print(
            f"         üîß Utilisation valeurs par d√©faut: {default_data['wind_direction']:.0f}¬∞/{default_data['wind_speed']:.0f}kn")

        return default_data

    def get_weather_for_point(self, waypoint: Waypoint,
                              time: datetime.datetime) -> Dict[str, Any]:
        """
        Obtenir la m√©t√©o pour un point sp√©cifique √† un instant donn√©.

        Cette m√©thode est un raccourci utilisant `get_weather_for_leg` avec le m√™me point en d√©part et arriv√©e.

        :param waypoint: Point de navigation
        :type waypoint: Waypoint
        :param time: Heure pour laquelle la m√©t√©o est demand√©e
        :type time: datetime.datetime

        :return: Donn√©es m√©t√©o au point donn√©
        :rtype: Dict[str, Any]
        """
        return self.get_weather_for_leg(waypoint, waypoint, time)

    def get_extended_forecast(self, waypoint: Waypoint,
                              days: int = 3) -> Dict[str, Any]:
        """
        Obtenir les pr√©visions m√©t√©orologiques √©tendues (par jour) pour un point.

        Cette m√©thode interroge l'API Tomorrow.io avec un pas de temps journalier,
        et retourne les pr√©visions pour le nombre de jours sp√©cifi√©.

        :param waypoint: Point g√©ographique pour lequel obtenir les pr√©visions
        :type waypoint: Waypoint
        :param days: Nombre de jours de pr√©vision (maximum 5 recommand√©)
        :type days: int

        :raises Exception: Si l'appel √† l'API √©choue ou les donn√©es sont invalides

        :return: Dictionnaire contenant les pr√©visions journali√®res ou une erreur
        :rtype: Dict[str, Any]
        """
        try:
            if not self.api_key:
                raise ValueError("Cl√© API requise")

            url = f"{self.base_url}/weather/forecast"
            params = {
                "location": f"{waypoint.lat},{waypoint.lon}",
                "timesteps": "daily",
                "apikey": self.api_key
            }

            response = requests.get(url, params=params, timeout=self.timeout)
            response.raise_for_status()

            data = response.json()

            forecast_days = []
            for day_data in data["timelines"]["daily"][:days]:
                values = day_data["values"]
                forecast_days.append({
                    'date': day_data["time"][:10],
                    'temp_min': values.get("temperatureMin", 10),
                    'temp_max': values.get("temperatureMax", 20),
                    'wind_speed_avg': values.get("windSpeedAvg", 15) * 1.943844,
                    'wind_direction': values.get("windDirectionAvg", 270),
                    'visibility': values.get("visibilityAvg", 10),
                    'precipitation': values.get("precipitationIntensityAvg", 0),
                    'weather_code': values.get("weatherCodeMax", 1000)
                })

            return {
                'location': f"{waypoint.name} ({waypoint.lat:.3f}, {waypoint.lon:.3f})",
                'forecast': forecast_days,
                'source': 'Tomorrow.io'
            }

        except Exception as e:
            print(f"Erreur pr√©visions √©tendues: {e}")
            return {'error': str(e)}

    def analyze_weather_for_route(self, waypoints: list,
                                  start_time: datetime.datetime,
                                  aircraft_speed: float = 110) -> Dict[str, Any]:
        """
        Analyser la m√©t√©o tout au long d'un itin√©raire a√©rien en tenant compte du timing r√©el.

        Cette m√©thode calcule les horaires de passage aux diff√©rents waypoints en fonction de
        la vitesse de croisi√®re, puis r√©cup√®re la m√©t√©o √† chaque point en cons√©quence.
        Une synth√®se m√©t√©o est ensuite g√©n√©r√©e via `_analyze_weather_trends`.

        :param waypoints: Liste ordonn√©e des points de passage de la route
        :type waypoints: list[Waypoint]
        :param start_time: Heure r√©elle de d√©part du vol
        :type start_time: datetime.datetime
        :param aircraft_speed: Vitesse de croisi√®re en n≈ìuds (knots)
        :type aircraft_speed: float

        :raises Exception: En cas d‚Äôerreur pendant le traitement m√©t√©o de l‚Äôitin√©raire

        :return: Dictionnaire avec les conditions m√©t√©o d√©taill√©es par segment et une analyse globale
        :rtype: Dict[str, Any]
        """
        weather_points = []
        current_time = start_time

        print(f"üå§Ô∏è Analyse m√©t√©o route avec timing r√©el:")
        print(f"   D√©part: {start_time.strftime('%Y-%m-%d %H:%M UTC')}")
        print(f"   Vitesse: {aircraft_speed} kn")

        try:
            for i, wp in enumerate(waypoints):
                print(f"   WP{i + 1}: {wp.name} √† {current_time.strftime('%H:%M UTC')}")

                weather = self.get_weather_for_point(wp, current_time)
                weather_points.append({
                    'waypoint': wp.name,
                    'time': current_time.strftime("%H:%M UTC"),
                    'weather': weather
                })

                # Calcul du temps de vol vers le prochain point
                if i < len(waypoints) - 1:
                    next_wp = waypoints[i + 1]

                    # Import dynamique pour √©viter la d√©pendance globale
                    from ..calculations.navigation import calculate_distance
                    distance_nm = calculate_distance(wp.lat, wp.lon, next_wp.lat, next_wp.lon)

                    flight_time_minutes = (distance_nm / aircraft_speed) * 60

                    print(f"      ‚Üí {next_wp.name}: {distance_nm:.1f}NM, {flight_time_minutes:.0f}min")

                    current_time += datetime.timedelta(minutes=flight_time_minutes)

            analysis = self._analyze_weather_trends(weather_points)

            print(f"‚úÖ Analyse m√©t√©o termin√©e: {len(weather_points)} points")

            return {
                'route_weather': weather_points,
                'analysis': analysis,
                'generated_at': datetime.datetime.now().isoformat(),
                'flight_start_time': start_time.isoformat(),
                'aircraft_speed': aircraft_speed
            }

        except Exception as e:
            print(f"‚ùå Erreur analyse m√©t√©o route: {e}")
            import traceback
            traceback.print_exc()
            return {'error': str(e)}

    def analyze_weather_for_itinerary(self, itinerary) -> Dict[str, Any]:
        """
        Analyser la m√©t√©o pour un itin√©raire d√©j√† calcul√©, avec des timings pr√©cis.

        Cette m√©thode utilise les dur√©es de vol pr√©calcul√©es dans les `legs` de l'objet `Itinerary`,
        et r√©cup√®re les conditions m√©t√©o √† chaque point de l'itin√©raire au moment estim√© de passage.

        :param itinerary: Objet contenant les waypoints, les legs (segments) et l'heure de d√©part
        :type itinerary: Itinerary

        :return: Dictionnaire contenant les conditions m√©t√©o par segment et une analyse globale
        :rtype: Dict[str, Any]
        """
        if not itinerary.waypoints or not itinerary.start_time:
            return {'error': 'Itin√©raire incomplet (pas de waypoints ou heure de d√©part)'}

        weather_points = []
        current_time = itinerary.start_time

        print(f"üå§Ô∏è Analyse m√©t√©o pour itin√©raire calcul√©:")
        print(f"   D√©part: {current_time.strftime('%Y-%m-%d %H:%M UTC')}")
        print(f"   Waypoints: {len(itinerary.waypoints)}")
        print(f"   Legs: {len(itinerary.legs)}")

        try:
            wp = itinerary.waypoints[0]
            print(f"   WP1: {wp.name} √† {current_time.strftime('%H:%M UTC')} (d√©part)")

            weather = self.get_weather_for_point(wp, current_time)
            weather_points.append({
                'waypoint': wp.name,
                'time': current_time.strftime("%H:%M UTC"),
                'weather': weather,
                'leg_info': 'D√©part'
            })

            for i, leg in enumerate(itinerary.legs):
                arrival_time = itinerary.start_time + datetime.timedelta(minutes=leg.time_tot)
                wp = leg.ending_wp

                print(f"   WP{i + 2}: {wp.name} √† {arrival_time.strftime('%H:%M UTC')} "
                      f"(apr√®s {leg.time_leg:.0f}min de vol)")

                weather = self.get_weather_for_point(wp, arrival_time)
                weather_points.append({
                    'waypoint': wp.name,
                    'time': arrival_time.strftime("%H:%M UTC"),
                    'weather': weather,
                    'leg_info': f"Leg {i + 1}: {leg.time_leg:.0f}min, {leg.distance:.1f}NM"
                })

            analysis = self._analyze_weather_trends(weather_points)

            if itinerary.legs:
                analysis['flight_summary'] = {
                    'total_time_minutes': itinerary.legs[-1].time_tot,
                    'total_distance_nm': sum(leg.distance for leg in itinerary.legs),
                    'departure_time': itinerary.start_time.strftime('%Y-%m-%d %H:%M UTC'),
                    'arrival_time': (itinerary.start_time +
                                     datetime.timedelta(minutes=itinerary.legs[-1].time_tot)).strftime('%H:%M UTC')
                }

            print(f"‚úÖ Analyse m√©t√©o itin√©raire termin√©e: {len(weather_points)} points")

            return {
                'route_weather': weather_points,
                'analysis': analysis,
                'generated_at': datetime.datetime.now().isoformat(),
                'flight_start_time': itinerary.start_time.isoformat(),
                'method': 'calculated_itinerary'
            }

        except Exception as e:
            print(f"‚ùå Erreur analyse m√©t√©o itin√©raire: {e}")
            import traceback
            traceback.print_exc()
            return {'error': str(e)}

    def _analyze_weather_trends(self, weather_points: list) -> Dict[str, Any]:
        """
        Analyser les tendances m√©t√©o globales √† partir des diff√©rents points de l'itin√©raire.

        Cette m√©thode agr√®ge les donn√©es m√©t√©o (vent, visibilit√©, pr√©cipitations) et
        g√©n√®re une synth√®se statistique, ainsi que des alertes pertinentes.

        :param weather_points: Liste de points contenant des donn√©es m√©t√©o
        :type weather_points: list[Dict[str, Any]]

        :return: Analyse statistique et alertes m√©t√©o
        :rtype: Dict[str, Any]
        """
        if not weather_points:
            return {}

        wind_speeds = [wp['weather']['wind_speed'] for wp in weather_points]
        wind_directions = [wp['weather']['wind_direction'] for wp in weather_points]
        visibilities = [wp['weather']['visibility'] for wp in weather_points]
        precipitations = [wp['weather']['precipitation'] for wp in weather_points]

        return {
            'wind_speed': {
                'min': min(wind_speeds),
                'max': max(wind_speeds),
                'avg': sum(wind_speeds) / len(wind_speeds)
            },
            'wind_direction': {
                'avg': self._circular_mean(wind_directions),
                'variation': max(wind_directions) - min(wind_directions)
            },
            'visibility': {
                'min': min(visibilities),
                'avg': sum(visibilities) / len(visibilities)
            },
            'precipitation': {
                'max': max(precipitations),
                'total': sum(precipitations)
            },
            'alerts': self._generate_weather_alerts(weather_points)
        }

    def _circular_mean(self, angles: list) -> float:
        """
        Calculer la moyenne circulaire d'une liste d'angles (en degr√©s).

        Utile pour d√©terminer la moyenne des directions du vent,
        en prenant en compte la circularit√© (0¬∞ ‚âà 360¬∞).

        :param angles: Liste d'angles en degr√©s
        :type angles: list[float]

        :return: Moyenne circulaire en degr√©s (0‚Äì360)
        :rtype: float
        """
        if not angles:
            return 0

        x = sum(math.cos(math.radians(angle)) for angle in angles)
        y = sum(math.sin(math.radians(angle)) for angle in angles)

        mean_rad = math.atan2(y, x)
        return (math.degrees(mean_rad) + 360) % 360

    def _generate_weather_alerts(self, weather_points: list) -> list:
        """
        G√©n√©rer une liste d'alertes m√©t√©o √† partir des conditions observ√©es sur l'itin√©raire.

        Les alertes incluent :
        - Vent fort (>25 kn)
        - Visibilit√© r√©duite (<5 km)
        - Pr√©cipitations significatives (>1 mm/h)
        - Couverture nuageuse √©lev√©e (>80%)

        :param weather_points: Liste des points m√©t√©o analys√©s
        :type weather_points: list[Dict[str, Any]]

        :return: Liste d'alertes (cha√Ænes de caract√®res)
        :rtype: list[str]
        """
        alerts = []

        for wp in weather_points:
            weather = wp['weather']

            if weather['wind_speed'] > 25:
                alerts.append(f"Vent fort √† {wp['waypoint']}: {weather['wind_speed']:.0f} kn")

            if weather['visibility'] < 5:
                alerts.append(f"Visibilit√© r√©duite √† {wp['waypoint']}: {weather['visibility']:.1f} km")

            if weather['precipitation'] > 1:
                alerts.append(f"Pr√©cipitations √† {wp['waypoint']}: {weather['precipitation']:.1f} mm/h")

            if weather['cloud_cover'] > 80:
                alerts.append(f"Ciel tr√®s nuageux √† {wp['waypoint']}: {weather['cloud_cover']:.0f}%")

        return alerts

    def get_weather_summary_text(self, weather_data: Dict[str, Any]) -> str:
        """
        G√©n√©rer un r√©sum√© textuel des conditions m√©t√©o.

        Le r√©sum√© inclut la direction et la vitesse du vent, la temp√©rature,
        la visibilit√©, ainsi que les pr√©cipitations si pr√©sentes.

        :param weather_data: Dictionnaire des donn√©es m√©t√©o
        :type weather_data: Dict[str, Any]

        :return: Cha√Æne de r√©sum√© textuel des conditions m√©t√©o
        :rtype: str
        """
        if 'error' in weather_data:
            return f"Erreur m√©t√©o: {weather_data['error']}"

        wind_dir = weather_data.get('wind_direction', 270)
        wind_speed = weather_data.get('wind_speed', 15)
        temp = weather_data.get('temperature', 15)
        visibility = weather_data.get('visibility', 10)

        # Direction cardinale du vent
        wind_cardinal = self._wind_direction_to_cardinal(wind_dir)

        summary = f"Vent: {wind_cardinal} {wind_speed:.0f} kn"
        summary += f", Temp: {temp:.0f}¬∞C"
        summary += f", Visibilit√©: {visibility:.0f} km"

        if weather_data.get('precipitation', 0) > 0:
            summary += f", Pr√©cip: {weather_data['precipitation']:.1f} mm/h"

        return summary

    def _wind_direction_to_cardinal(self, direction: float) -> str:
        """
        Convertir une direction angulaire (en degr√©s) en point cardinal.

        :param direction: Direction en degr√©s (0 √† 360)
        :type direction: float

        :return: Point cardinal (ex. : N, NE, SSW)
        :rtype: str
        """
        directions = [
            "N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE",
            "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"
        ]

        index = round(direction / 22.5) % 16
        return directions[index]

    def is_weather_suitable_for_vfr(self, weather_data: Dict[str, Any]) -> Tuple[bool, list]:
        """
        V√©rifier si les conditions m√©t√©o sont compatibles avec un vol en VFR (Visual Flight Rules).

        √âvalue la visibilit√©, la couverture nuageuse, les pr√©cipitations et le vent.

        :param weather_data: Donn√©es m√©t√©o analys√©es
        :type weather_data: Dict[str, Any]

        :return: Tuple (adapt√©, raisons), o√π 'adapt√©' est un bool√©en et 'raisons' une liste d'explications
        :rtype: Tuple[bool, list]
        """
        reasons = []
        suitable = True

        # Visibilit√© minimale VFR: 3 SM (‚âà5 km)
        visibility = weather_data.get('visibility', 10)
        if visibility < 5:
            suitable = False
            reasons.append(f"Visibilit√© insuffisante: {visibility:.1f} km (min: 5 km)")

        # Plafond nuageux
        cloud_cover = weather_data.get('cloud_cover', 0)
        if cloud_cover > 75:
            reasons.append(f"Couverture nuageuse √©lev√©e: {cloud_cover:.0f}%")

        # Pr√©cipitations
        precipitation = weather_data.get('precipitation', 0)
        if precipitation > 2:
            suitable = False
            reasons.append(f"Pr√©cipitations importantes: {precipitation:.1f} mm/h")

        # Vent fort
        wind_speed = weather_data.get('wind_speed', 0)
        if wind_speed > 30:
            reasons.append(f"Vent tr√®s fort: {wind_speed:.0f} kn")

        if suitable and not reasons:
            reasons.append("Conditions favorables au VFR")

        return suitable, reasons


# Instance globale pour faciliter l'utilisation
weather_service = WeatherService()

# Fonctions utilitaires export√©es
def get_weather_for_leg(start_wp: Waypoint, end_wp: Waypoint,
                       start_time: datetime.datetime, api_key: str = None) -> Dict[str, Any]:
    """
    Obtenir les donn√©es m√©t√©o pour un segment de vol entre deux waypoints.

    :param start_wp: Waypoint de d√©part
    :type start_wp: Waypoint
    :param end_wp: Waypoint d‚Äôarriv√©e
    :type end_wp: Waypoint
    :param start_time: Heure √† laquelle le segment est survol√©
    :type start_time: datetime.datetime
    :param api_key: Cl√© API Tomorrow.io (optionnelle)
    :type api_key: str, optional

    :return: Donn√©es m√©t√©o pour ce segment
    :rtype: Dict[str, Any]
    """
    if api_key:
        weather_service.set_api_key(api_key)
    return weather_service.get_weather_for_leg(start_wp, end_wp, start_time)

def get_weather_summary(weather_data: Dict[str, Any]) -> str:
    """
    G√©n√©rer un r√©sum√© textuel √† partir des donn√©es m√©t√©o.

    :param weather_data: Dictionnaire contenant les donn√©es m√©t√©o
    :type weather_data: Dict[str, Any]

    :return: R√©sum√© texte
    :rtype: str
    """
    return weather_service.get_weather_summary_text(weather_data)

def check_vfr_conditions(weather_data: Dict[str, Any]) -> Tuple[bool, list]:
    """
    V√©rifier si les conditions m√©t√©o sont favorables au vol √† vue (VFR).

    :param weather_data: Donn√©es m√©t√©o
    :type weather_data: Dict[str, Any]

    :return: Tuple contenant un bool√©en (conditions favorables ou non)
             et une liste d‚Äôexplications/alertes
    :rtype: Tuple[bool, list]
    """
    return weather_service.is_weather_suitable_for_vfr(weather_data)