"""
Fen√™tre principale de l'application VFR Planner
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import json
import os

from .tabs import AircraftTab, AirportsTab, RouteTab, PlanTab, WEATHER_API_KEY
from .widgets import StatusBarWidget
from ..data.airport_db import AirportDatabase
from .. import __version__, __author__


class VFRPlannerGUI:
    """
    Fen√™tre principale de l'application VFR Planner.

    :param root: Fen√™tre racine Tkinter utilis√©e comme conteneur principal de l'interface graphique.
    :type root: tkinter.Tk
    """

    def __init__(self, root):
        """
        Initialise l'interface graphique de VFR Planner.

        Cette m√©thode configure la fen√™tre principale, initialise la base de donn√©es d'a√©roports,
        cr√©e les widgets de l'interface et configure les √©v√©nements n√©cessaires.
        """
        self.root = root
        self.setup_window()

        # Initialiser la base de donn√©es d'a√©roports
        self.airport_db = AirportDatabase()

        # Variables de l'application
        self.current_project_file = None
        self.unsaved_changes = False

        # Cr√©er l'interface
        self.create_menu()
        self.create_widgets()
        self.setup_bindings()

        # Initialiser la barre d'√©tat
        self.update_status_bar()

    def setup_window(self):
        """
        Configure les propri√©t√©s de la fen√™tre principale.

        D√©finie le titre, la taille minimale, l'ic√¥ne (si disponible),
        et la proc√©dure √† ex√©cuter lors de la fermeture de la fen√™tre.
        """
        self.root.title(f"VFR Planner v{__version__}")
        self.root.geometry("1200x800")
        self.root.minsize(1000, 600)

        # Ic√¥ne (si disponible)
        try:
            # Charger ic√¥ne depuis les ressources
            icon_path = os.path.join(os.path.dirname(__file__), "..", "resources", "icon.ico")
            if os.path.exists(icon_path):
                self.root.iconbitmap(icon_path)
        except:
            pass  # Ignorer si pas d'ic√¥ne

        # Configuration de fermeture
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

    def create_menu(self):
        """
        Cr√©e la barre de menu principale de l'application.

        Cette m√©thode configure les menus suivants :
        - Fichier : op√©rations sur les projets (nouveau, ouvrir, sauvegarder, exporter, quitter)
        - √âdition : actions g√©n√©rales et pr√©f√©rences
        - Outils : fonctions utilitaires (calculs, m√©t√©o, carte, diagnostics)
        - Aide : acc√®s au guide, raccourcis et √† propos
        """
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)

        # Menu Fichier
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Fichier", menu=file_menu)
        file_menu.add_command(label="Nouveau plan", command=self.new_project, accelerator="Ctrl+N")
        file_menu.add_command(label="Ouvrir...", command=self.open_project, accelerator="Ctrl+O")
        file_menu.add_command(label="Sauvegarder", command=self.save_project, accelerator="Ctrl+S")
        file_menu.add_command(label="Sauvegarder sous...", command=self.save_project_as, accelerator="Ctrl+Shift+S")
        file_menu.add_separator()
        file_menu.add_command(label="Exporter Excel...", command=self.export_excel)
        file_menu.add_command(label="Exporter PDF...", command=self.export_pdf)
        file_menu.add_separator()
        file_menu.add_command(label="Quitter", command=self.on_closing, accelerator="Ctrl+Q")

        # Menu √âdition
        edit_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="√âdition", menu=edit_menu)
        edit_menu.add_command(label="Copier plan", command=self.copy_plan, accelerator="Ctrl+C")
        edit_menu.add_command(label="Pr√©f√©rences...", command=self.show_preferences)

        # Menu Outils
        tools_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Outils", menu=tools_menu)
        tools_menu.add_command(label="Calculer itin√©raire", command=self.calculate_route)
        tools_menu.add_command(label="V√©rifier m√©t√©o", command=self.check_weather)
        tools_menu.add_command(label="Carte interactive", command=self.show_interactive_map)
        tools_menu.add_separator()
        tools_menu.add_command(label="Diagnostic syst√®me", command=self.system_diagnostic)
        tools_menu.add_command(label="Test API m√©t√©o", command=self.test_weather_api)

        # Menu Aide
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Aide", menu=help_menu)
        help_menu.add_command(label="Guide d'utilisation", command=self.show_user_guide)
        help_menu.add_command(label="Raccourcis clavier", command=self.show_shortcuts)
        help_menu.add_separator()
        help_menu.add_command(label="√Ä propos", command=self.show_about)

    def create_widgets(self):
        """
        Cr√©e et affiche les widgets principaux de l'application.

        Cette m√©thode instancie les onglets de navigation (a√©ronef, a√©roports, itin√©raire, plan de vol),
        ainsi que la barre d'√©tat. En cas d'erreur lors de la cr√©ation, une interface minimale est affich√©e.
        """
        try:
            # Notebook pour les onglets
            self.notebook = ttk.Notebook(self.root)
            self.notebook.pack(fill='both', expand=True, padx=10, pady=10)

            # Onglet 1: A√©ronef
            self.aircraft_tab = AircraftTab(self.notebook, self)
            self.notebook.add(self.aircraft_tab, text="‚úàÔ∏è A√©ronef")

            # Onglet 2: A√©roports
            self.airports_tab = AirportsTab(self.notebook, self)
            self.notebook.add(self.airports_tab, text="üõ´ A√©roports")

            # Onglet 3: Itin√©raire
            self.route_tab = RouteTab(self.notebook, self)
            self.notebook.add(self.route_tab, text="üó∫Ô∏è Itin√©raire")

            # Onglet 4: Plan de vol
            self.plan_tab = PlanTab(self.notebook, self)
            self.notebook.add(self.plan_tab, text="üìã Plan de vol")

            # Barre d'√©tat
            self.status_bar = StatusBarWidget(self.root)
            self.status_bar.pack(side='bottom', fill='x')

            print("Widgets cr√©√©s avec succ√®s")

        except Exception as e:
            print(f"Erreur lors de la cr√©ation des widgets: {e}")
            import traceback
            traceback.print_exc()

            # Cr√©er une interface minimale en cas d'erreur
            error_label = tk.Label(self.root, text=f"Erreur d'initialisation: {e}")
            error_label.pack(expand=True)

            # Barre d'√©tat minimale
            self.status_bar = StatusBarWidget(self.root)
            self.status_bar.pack(side='bottom', fill='x')
            self.status_bar.set_status(f"Erreur: {e}")

    def setup_bindings(self):
        """
        Configure les raccourcis clavier et les √©v√©nements de l'application.

        Cette m√©thode associe des combinaisons de touches √† des actions comme
        cr√©er un nouveau projet, ouvrir, sauvegarder, copier, etc.,
        ainsi que le changement d'onglet pour d√©tecter les modifications.
        """
        self.root.bind('<Control-n>', lambda e: self.new_project())
        self.root.bind('<Control-o>', lambda e: self.open_project())
        self.root.bind('<Control-s>', lambda e: self.save_project())
        self.root.bind('<Control-Shift-S>', lambda e: self.save_project_as())
        self.root.bind('<Control-q>', lambda e: self.on_closing())
        self.root.bind('<Control-c>', lambda e: self.copy_plan())
        self.root.bind('<F5>', lambda e: self.calculate_route())
        self.root.bind('<F9>', lambda e: self.show_interactive_map())

        # D√©tecter les changements pour marquer comme modifi√©
        self.notebook.bind('<<NotebookTabChanged>>', self.on_tab_changed)

    def update_status_bar(self):
        """
        Met √† jour le contenu de la barre d'√©tat.

        Affiche l'√©tat de la connexion √† l'API m√©t√©o, le nombre d'a√©roports visibles,
        et un message de statut par d√©faut.
        """
        # Statut API - toujours configur√©e maintenant
        self.status_bar.set_api_status(True, True)

        # Nombre d'a√©roports
        stats = self.airport_db.get_filter_stats()
        self.status_bar.set_airports_count(stats['filtered'])

        # Message par d√©faut
        self.status_bar.set_status("Pr√™t - API m√©t√©o configur√©e automatiquement")

    def on_tab_changed(self, event):
        """
        Appel√© lorsque l'utilisateur change d'onglet dans l'application.

        :param event: √âv√©nement Tkinter d√©clench√© par le changement d'onglet.
        :type event: tkinter.Event
        """
        # Mettre √† jour selon l'onglet actuel
        current_tab = self.notebook.index(self.notebook.select())

        if current_tab == 0:  # A√©ronef
            self.status_bar.set_status("Configurez les param√®tres de votre a√©ronef")
        elif current_tab == 1:  # A√©roports
            self.status_bar.set_status("S√©lectionnez vos a√©roports de d√©part et d'arriv√©e")
        elif current_tab == 2:  # Itin√©raire
            self.status_bar.set_status("D√©finissez votre itin√©raire d√©taill√©")
        elif current_tab == 3:  # Plan
            self.status_bar.set_status("Calculez et exportez votre plan de vol")

    def mark_unsaved(self):
        """
        Marque le projet comme ayant des modifications non sauvegard√©es.

        Ajoute un ast√©risque au titre de la fen√™tre si ce n'est pas d√©j√† fait.
        """
        if not self.unsaved_changes:
            self.unsaved_changes = True
            title = self.root.title()
            if not title.endswith(" *"):
                self.root.title(title + " *")

    def mark_saved(self):
        """
        Marque le projet comme sauvegard√©.

        Retire l'ast√©risque du titre de la fen√™tre si pr√©sent.
        """
        self.unsaved_changes = False
        title = self.root.title()
        if title.endswith(" *"):
            self.root.title(title[:-2])

    # Actions du menu Fichier
    def new_project(self):
        """
        Cr√©e un nouveau projet en r√©initialisant tous les onglets.

        Affiche une bo√Æte de dialogue pour sauvegarder les modifications en cours si n√©cessaire.
        R√©initialise les widgets des onglets A√©ronef, A√©roports, Itin√©raire et Plan de vol.
        """
        if self.unsaved_changes:
            result = messagebox.askyesnocancel(
                "Nouveau projet",
                "Sauvegarder les modifications actuelles?"
            )
            if result is True:
                if not self.save_project():
                    return
            elif result is None:
                return

        # R√©initialiser tout avec v√©rifications
        try:
            self.aircraft_tab.clear_all()

            if hasattr(self.airports_tab, 'departure_search') and self.airports_tab.departure_search:
                self.airports_tab.departure_search.clear()
            if hasattr(self.airports_tab, 'destination_search') and self.airports_tab.destination_search:
                self.airports_tab.destination_search.clear()
            if hasattr(self.airports_tab, 'flight_info_text') and self.airports_tab.flight_info_text:
                self.airports_tab.flight_info_text.delete('1.0', tk.END)

            if hasattr(self.route_tab, 'clear_waypoints'):
                self.route_tab.clear_waypoints()
            if hasattr(self.route_tab, 'waypoint_detail_text') and self.route_tab.waypoint_detail_text:
                self.route_tab.waypoint_detail_text.delete('1.0', tk.END)

            if hasattr(self.plan_tab, 'plan_text') and self.plan_tab.plan_text:
                self.plan_tab.plan_text.delete('1.0', tk.END)
            if hasattr(self.plan_tab, 'calculated_itinerary'):
                self.plan_tab.calculated_itinerary = None

            self.current_project_file = None
            self.mark_saved()
            self.root.title(f"VFR Planner v{__version__} - Nouveau projet")
            self.status_bar.set_status("Nouveau projet cr√©√©")

        except Exception as e:
            print(f"Erreur lors de la r√©initialisation: {e}")
            self.status_bar.set_status("Erreur lors de la cr√©ation du nouveau projet")

    def open_project(self):
        """
        Ouvre un projet existant depuis un fichier .vfr ou .json.

        Affiche une bo√Æte de dialogue de confirmation si des modifications non sauvegard√©es existent.
        Charge les donn√©es du projet s√©lectionn√© et met √† jour l'interface.

        :return: None
        """
        if self.unsaved_changes:
            result = messagebox.askyesnocancel(
                "Ouvrir projet",
                "Sauvegarder les modifications actuelles?"
            )
            if result is True:
                if not self.save_project():
                    return
            elif result is None:
                return

        filename = filedialog.askopenfilename(
            title="Ouvrir un projet VFR",
            filetypes=[("Projets VFR", "*.vfr"), ("JSON files", "*.json"), ("Tous", "*.*")]
        )

        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    project_data = json.load(f)

                self.load_project_data(project_data)
                self.current_project_file = filename
                self.mark_saved()

                project_name = os.path.basename(filename)
                self.root.title(f"VFR Planner v{__version__} - {project_name}")
                self.status_bar.set_status(f"Projet ouvert: {project_name}")

            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de l'ouverture:\n{e}")

    def save_project(self):
        """
        Sauvegarde le projet courant.

        Si un fichier de projet est d√©j√† associ√©, il est √©cras√©.
        Sinon, d√©clenche une demande de nouveau nom de fichier.

        :return: True si la sauvegarde a r√©ussi, False sinon.
        :rtype: bool
        """
        if self.current_project_file:
            return self.save_project_to_file(self.current_project_file)
        else:
            return self.save_project_as()

    def save_project_as(self):
        """
        Sauvegarde le projet sous un nouveau nom choisi par l'utilisateur.

        :return: True si la sauvegarde a r√©ussi, False sinon.
        :rtype: bool
        """
        filename = filedialog.asksaveasfilename(
            title="Sauvegarder le projet VFR",
            defaultextension=".vfr",
            filetypes=[("Projets VFR", "*.vfr"), ("JSON files", "*.json")]
        )

        if filename:
            return self.save_project_to_file(filename)
        return False

    def save_project_to_file(self, filename):
        """
        Sauvegarde les donn√©es du projet dans un fichier.

        :param filename: Chemin du fichier dans lequel enregistrer les donn√©es du projet.
        :type filename: str
        :return: True si la sauvegarde a r√©ussi, False sinon.
        :rtype: bool
        """
        try:
            project_data = self.get_project_data()

            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(project_data, f, indent=2, ensure_ascii=False)

            self.current_project_file = filename
            self.mark_saved()

            project_name = os.path.basename(filename)
            self.root.title(f"VFR Planner v{__version__} - {project_name}")
            self.status_bar.set_status(f"Projet sauvegard√©: {project_name}")
            return True

        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors de la sauvegarde:\n{e}")
            return False

    def get_project_data(self):
        """
        Extrait les donn√©es actuelles du projet pour les sauvegarder dans un fichier.

        :return: Dictionnaire contenant les donn√©es du projet.
        :rtype: dict
        """
        return {
            'version': __version__,
            'aircraft': self.aircraft_tab.get_aircraft_data(),
            'flight': self.aircraft_tab.get_flight_data(),
            'departure_airport': self.airports_tab.departure_airport,
            'destination_airport': self.airports_tab.destination_airport,
            'waypoints': self.route_tab.get_waypoints(),
            'api_configured': True,  # Toujours configur√©e maintenant
            'saved_at': tk._default_root.tk.call('clock', 'format',
                                                 tk._default_root.tk.call('clock', 'seconds'),
                                                 '-format', '%Y-%m-%d %H:%M:%S')
        }

    def load_project_data(self, project_data):
        """
        Charge les donn√©es d‚Äôun projet dans les diff√©rents onglets de l‚Äôinterface.

        :param project_data: Dictionnaire contenant les donn√©es du projet √† charger.
        :type project_data: dict
        :return: None
        """
        try:
            # Charger a√©ronef
            aircraft_data = project_data.get('aircraft', {})
            for key, value in aircraft_data.items():
                if key in self.aircraft_tab.aircraft_entries:
                    entry = self.aircraft_tab.aircraft_entries[key]
                    entry.delete(0, tk.END)
                    entry.insert(0, str(value))

            # Charger vol
            flight_data = project_data.get('flight', {})
            for key, value in flight_data.items():
                if key in self.aircraft_tab.flight_entries:
                    entry = self.aircraft_tab.flight_entries[key]
                    entry.delete(0, tk.END)
                    entry.insert(0, str(value))

            # Charger a√©roports avec v√©rifications
            if project_data.get('departure_airport') and hasattr(self.airports_tab,
                                                                 'departure_search') and self.airports_tab.departure_search:
                self.airports_tab.departure_airport = project_data['departure_airport']
                self.airports_tab.departure_search.set_airport(project_data['departure_airport'])

            if project_data.get('destination_airport') and hasattr(self.airports_tab,
                                                                   'destination_search') and self.airports_tab.destination_search:
                self.airports_tab.destination_airport = project_data['destination_airport']
                self.airports_tab.destination_search.set_airport(project_data['destination_airport'])

            # Charger waypoints
            waypoints = project_data.get('waypoints', [])
            if hasattr(self.route_tab, 'waypoints'):
                self.route_tab.waypoints = waypoints
                if hasattr(self.route_tab, 'update_waypoint_list'):
                    self.route_tab.update_waypoint_list()

            # Mettre √† jour les affichages
            if hasattr(self.airports_tab, 'update_flight_info'):
                self.airports_tab.update_flight_info()
            self.update_status_bar()

        except Exception as e:
            print(f"Erreur lors du chargement des donn√©es: {e}")
            messagebox.showerror("Erreur", f"Erreur lors du chargement:\n{e}")

    def export_excel(self):
        """
        Exporte le plan de vol au format Excel.

        Utilise la m√©thode d‚Äôexportation d√©finie dans l‚Äôonglet `plan_tab`.
        """
        self.plan_tab.export_excel()

    def export_pdf(self):
        """
        Exporte le plan de vol au format PDF.

        Utilise la m√©thode d‚Äôexportation d√©finie dans l‚Äôonglet `plan_tab`.
        """
        self.plan_tab.export_pdf()

    def copy_plan(self):
        """
        Copie le contenu du plan de vol dans le presse-papier.

        Si aucun plan n‚Äôest d√©fini, affiche un message d‚Äôavertissement.
        """
        plan_content = self.plan_tab.plan_text.get('1.0', tk.END)
        if plan_content.strip():
            self.root.clipboard_clear()
            self.root.clipboard_append(plan_content)
            self.status_bar.set_status("Plan copi√© dans le presse-papier")
        else:
            messagebox.showwarning("Attention", "Aucun plan de vol √† copier")

    def show_preferences(self):
        """
        Affiche une bo√Æte de dialogue de pr√©f√©rences.

        Actuellement, cette fonctionnalit√© n‚Äôest pas encore impl√©ment√©e.
        """
        messagebox.showinfo("Pr√©f√©rences", "Fonctionnalit√© √† impl√©menter")

    # Actions du menu Outils
    def calculate_route(self):
        """
        Calcule automatiquement l'itin√©raire de vol.

        Appelle la m√©thode de calcul d√©finie dans l‚Äôonglet `plan_tab`.
        """
        self.plan_tab.calculate_route()

    def check_weather(self):
        """
        V√©rifie les conditions m√©t√©o le long de l'itin√©raire de vol.

        Utilise les informations de vol (date, heure, vitesse) pour d√©terminer
        le moment exact de passage sur chaque waypoint et fait appel √† l‚ÄôAPI m√©t√©o
        via `WeatherService`. Affiche les r√©sultats dans une interface d√©di√©e.

        En cas d'erreur, affiche un message √† l'utilisateur.
        """
        waypoints = self.route_tab.get_waypoints()
        if not waypoints:
            messagebox.showwarning("Attention", "Aucun waypoint d√©fini")
            return

        try:
            from ..calculations.weather import WeatherService
            from ..models.waypoint import Waypoint
            import datetime
            import pytz

            # Utiliser la cl√© API int√©gr√©e
            weather_service = WeatherService(WEATHER_API_KEY)

            # R√©cup√©rer les informations de vol pour le timing correct
            flight_data = self.aircraft_tab.get_flight_data()
            aircraft_data = self.aircraft_tab.get_aircraft_data()

            print(f"üå§Ô∏è V√©rification m√©t√©o avec timing vol:")
            print(f"   Flight data: {flight_data}")

            # Calculer l'heure de d√©part r√©elle
            date_str = flight_data.get('date', '')
            time_str = flight_data.get('departure_time', '')

            if date_str and time_str:
                # Utiliser les donn√©es de vol
                try:
                    # Parser la date et l'heure
                    year, month, day = map(int, date_str.split('-'))
                    hour, minute = map(int, time_str.split(':'))

                    # Cr√©er datetime avec timezone
                    tz = pytz.timezone("America/Montreal")
                    dt = datetime.datetime(year, month, day, hour, minute)
                    dt = tz.localize(dt)
                    start_time = dt.astimezone(pytz.utc)

                    print(f"   Heure d√©part configur√©e: {start_time.strftime('%Y-%m-%d %H:%M UTC')}")

                except Exception as e:
                    print(f"   ‚ö†Ô∏è Erreur parsing date/heure: {e}, utilisation heure actuelle")
                    start_time = datetime.datetime.now(pytz.utc)
            else:
                print(f"   ‚ö†Ô∏è Pas de date/heure configur√©e, utilisation heure actuelle")
                start_time = datetime.datetime.now(pytz.utc)

            # R√©cup√©rer la vitesse de croisi√®re pour des calculs pr√©cis
            try:
                cruise_speed = float(aircraft_data.get('cruise_speed', 110))
            except (ValueError, TypeError):
                cruise_speed = 110

            print(f"   Vitesse croisi√®re: {cruise_speed} kn")

            # Convertir waypoints en objets Waypoint
            wp_objects = [Waypoint(wp['lat'], wp['lon'], wp['name']) for wp in waypoints]

            # Choisir la m√©thode d'analyse selon la disponibilit√© de l'itin√©raire calcul√©
            if hasattr(self.plan_tab, 'calculated_itinerary') and self.plan_tab.calculated_itinerary:
                print("   üìä Utilisation itin√©raire calcul√© pour analyse pr√©cise")
                analysis = weather_service.analyze_weather_for_itinerary(self.plan_tab.calculated_itinerary)
            else:
                print("   üìä Utilisation analyse basique avec calculs de distance")
                analysis = weather_service.analyze_weather_for_route(wp_objects, start_time, cruise_speed)

            if 'error' in analysis:
                raise Exception(analysis['error'])

            # Afficher les r√©sultats
            self.show_weather_analysis(analysis, weather_service)

        except Exception as e:
            messagebox.showerror("Erreur m√©t√©o", f"Erreur lors de l'analyse m√©t√©o:\n{e}")

    def show_weather_analysis(self, analysis, weather_service):
        """
        Afficher l'analyse m√©t√©o dans une fen√™tre avec timing d√©taill√©.

        Ouvre une nouvelle fen√™tre affichant un rapport complet sur les conditions
        m√©t√©o le long de la route de vol, incluant un r√©sum√© de vol, d√©tails par waypoint,
        analyse des tendances m√©t√©o et recommandations VFR.

        :param analysis: dict contenant les donn√©es d‚Äôanalyse m√©t√©o et timing
        :param weather_service: instance du service m√©t√©o, utilis√©e pour v√©rifier les conditions VFR
        """
        weather_window = tk.Toplevel(self.root)
        weather_window.title("Analyse m√©t√©orologique avec timing de vol")
        weather_window.geometry("700x600")

        # Zone de texte avec scrollbar
        text_frame = ttk.Frame(weather_window)
        text_frame.pack(fill='both', expand=True, padx=10, pady=10)

        weather_text = tk.Text(text_frame, wrap='word', font=('Courier', 10))
        weather_text.pack(side='left', fill='both', expand=True)

        scrollbar = ttk.Scrollbar(text_frame, orient='vertical', command=weather_text.yview)
        scrollbar.pack(side='right', fill='y')
        weather_text.configure(yscrollcommand=scrollbar.set)

        # Formater le contenu avec timing d√©taill√©
        content = "ANALYSE M√âT√âOROLOGIQUE DE LA ROUTE\n"
        content += "=" * 60 + "\n\n"

        # Informations de timing
        if 'flight_start_time' in analysis:
            start_time = analysis['flight_start_time']
            content += f"üïê Heure de d√©part: {start_time}\n"

        if 'aircraft_speed' in analysis:
            content += f"‚úàÔ∏è Vitesse de croisi√®re: {analysis['aircraft_speed']} kn\n"

        if 'method' in analysis:
            method_desc = "Itin√©raire calcul√© (timing pr√©cis)" if analysis['method'] == 'calculated_itinerary' else "Calculs de distance"
            content += f"üìä M√©thode: {method_desc}\n"

        content += f"üìÖ Analyse g√©n√©r√©e: {analysis['generated_at'][:19]}\n\n"

        # R√©sum√© de vol si disponible
        if 'analysis' in analysis and 'flight_summary' in analysis['analysis']:
            summary = analysis['analysis']['flight_summary']
            content += "R√âSUM√â DU VOL:\n"
            content += f"Temps total: {summary['total_time_minutes']:.0f} minutes ({summary['total_time_minutes']/60:.1f}h)\n"
            content += f"Distance totale: {summary['total_distance_nm']:.1f} NM\n"
            content += f"D√©part: {summary['departure_time']}\n"
            content += f"Arriv√©e estim√©e: {summary['arrival_time']}\n\n"

        # D√©tails par waypoint
        content += "M√âT√âO PAR WAYPOINT:\n"
        content += "-" * 60 + "\n"

        for i, wp_weather in enumerate(analysis['route_weather']):
            content += f"\n{i+1}. Waypoint: {wp_weather['waypoint']}\n"
            content += f"   Heure: {wp_weather['time']}\n"

            if 'leg_info' in wp_weather:
                content += f"   Info: {wp_weather['leg_info']}\n"

            weather = wp_weather['weather']
            content += f"   Vent: {weather['wind_direction']:.0f}¬∞/{weather['wind_speed']:.0f} kn\n"
            content += f"   Temp√©rature: {weather['temperature']:.0f}¬∞C\n"
            content += f"   Visibilit√©: {weather['visibility']:.1f} km\n"
            content += f"   Couverture nuageuse: {weather['cloud_cover']:.0f}%\n"
            content += f"   Pr√©cipitations: {weather['precipitation']:.1f} mm/h\n"

        # Analyse des tendances
        if 'analysis' in analysis and analysis['analysis']:
            content += f"\n" + "=" * 60 + "\n"
            content += "ANALYSE DES TENDANCES:\n\n"
            anal = analysis['analysis']

            content += f"VENT:\n"
            if 'wind_speed' in anal:
                ws = anal['wind_speed']
                content += f"  Vitesse: min {ws['min']:.0f}kn, max {ws['max']:.0f}kn, moy {ws['avg']:.0f}kn\n"
            if 'wind_direction' in anal:
                wd = anal['wind_direction']
                content += f"  Direction moyenne: {wd['avg']:.0f}¬∞\n"
                content += f"  Variation: {wd['variation']:.0f}¬∞\n"

            if 'visibility' in anal:
                vis = anal['visibility']
                content += f"\nVISIBILIT√â:\n"
                content += f"  Minimale: {vis['min']:.1f} km\n"
                content += f"  Moyenne: {vis['avg']:.1f} km\n"

            if 'precipitation' in anal:
                precip = anal['precipitation']
                content += f"\nPR√âCIPITATIONS:\n"
                content += f"  Maximum: {precip['max']:.1f} mm/h\n"
                content += f"  Total route: {precip['total']:.1f} mm/h\n"

            # Alertes m√©t√©o
            if 'alerts' in anal and anal['alerts']:
                content += f"\n‚ö†Ô∏è ALERTES M√âT√âO:\n"
                for alert in anal['alerts']:
                    content += f"  ‚Ä¢ {alert}\n"
            else:
                content += f"\n‚úÖ Aucune alerte m√©t√©o\n"

        # Recommandations VFR
        content += f"\n" + "=" * 60 + "\n"
        content += "RECOMMANDATIONS VFR:\n\n"

        # V√©rifier les conditions VFR pour chaque point
        suitable_points = 0
        total_points = len(analysis['route_weather'])

        for wp_weather in analysis['route_weather']:
            weather = wp_weather['weather']
            suitable, reasons = weather_service.is_weather_suitable_for_vfr(weather)
            if suitable:
                suitable_points += 1

        content += f"Points avec conditions VFR: {suitable_points}/{total_points}\n"

        if suitable_points == total_points:
            content += "‚úÖ Conditions favorables au VFR sur toute la route\n"
        elif suitable_points >= total_points * 0.8:
            content += "‚ö†Ô∏è Conditions g√©n√©ralement bonnes, v√©rifier points probl√©matiques\n"
        else:
            content += "‚ùå Conditions difficiles, vol VFR non recommand√©\n"

        content += f"\nNote: Cette analyse utilise {'les temps de vol calcul√©s' if 'method' in analysis and analysis['method'] == 'calculated_itinerary' else 'des estimations de temps de vol'}"

        weather_text.insert('1.0', content)
        weather_text.configure(state='disabled')

    def show_interactive_map(self):
        """
        Affiche la carte interactive du plan de vol.

        D√©l√®gue l'affichage √† la m√©thode `show_map` de l'onglet plan de vol.
        """
        self.plan_tab.show_map()

    def system_diagnostic(self):
        """
        Affiche un diagnostic du syst√®me dans une bo√Æte d'information.

        Montre les versions de Python, Tkinter, VFR Planner, la pr√©sence des modules requis,
        le nombre d‚Äôa√©roports charg√©s, la configuration API m√©t√©o, etc.
        """
        import sys
        import platform

        diagnostic = f"""DIAGNOSTIC SYST√àME VFR PLANNER

Version VFR Planner: {__version__}
Auteurs: {__author__}

Syst√®me:
- OS: {platform.system()} {platform.release()}
- Python: {sys.version.split()[0]}
- Tkinter: Disponible

Base de donn√©es:
- A√©roports charg√©s: {len(self.airport_db)}
- Fichier CSV: {"‚úÖ" if self.airport_db.csv_path else "‚ùå"}

Configuration:
- API m√©t√©o: ‚úÖ Tomorrow.io (int√©gr√©e)

Modules requis:
"""
        # V√©rifier les modules
        modules = [
            ('pandas', 'Manipulation de donn√©es'),
            ('folium', 'Cartes interactives'),
            ('requests', 'API m√©t√©o'),
            ('openpyxl', 'Export Excel'),
            ('reportlab', 'Export PDF'),
            ('geopy', 'Calculs g√©ographiques'),
            ('pytz', 'Fuseaux horaires')
        ]

        for module, description in modules:
            try:
                __import__(module)
                diagnostic += f"‚úÖ {module}: {description}\n"
            except ImportError:
                diagnostic += f"‚ùå {module}: {description} (manquant)\n"

        messagebox.showinfo("Diagnostic syst√®me", diagnostic)

    def test_weather_api(self):
        """
        Lance un test de l'API m√©t√©o int√©gr√©e.

        Appelle la m√©thode de test API m√©t√©o depuis l'onglet plan de vol.
        """
        self.plan_tab.test_api()

    # Actions du menu Aide
    def show_user_guide(self):
        """
        Affiche une fen√™tre contenant le guide d'utilisation de VFR Planner.

        La fen√™tre pr√©sente les √©tapes principales pour configurer l'a√©ronef,
        s√©lectionner les a√©roports, planifier l'itin√©raire, calculer et exporter
        le plan de vol, ainsi que les raccourcis clavier utiles.
        """
        guide_text = """GUIDE D'UTILISATION VFR PLANNER

1. CONFIGURATION DE L'A√âRONEF
   - S√©lectionnez un a√©ronef pr√©d√©fini ou saisissez vos param√®tres
   - Remplissez les informations de vol (date, heure, pilote, etc.)

2. S√âLECTION DES A√âROPORTS
   - Utilisez les filtres pour affiner la recherche
   - Recherchez par code ICAO, IATA ou nom
   - S√©lectionnez d√©part et arriv√©e

3. PLANIFICATION DE L'ITIN√âRAIRE
   - Ajoutez des waypoints interm√©diaires si n√©cessaire
   - Modifiez l'ordre des waypoints
   - V√©rifiez les d√©tails de chaque point

4. CALCUL ET EXPORT DU PLAN
   - L'API m√©t√©o Tomorrow.io est d√©j√† configur√©e
   - Calculez l'itin√©raire complet avec vent
   - Exportez en Excel ou PDF

RACCOURCIS CLAVIER:
- Ctrl+N: Nouveau projet
- Ctrl+O: Ouvrir projet
- Ctrl+S: Sauvegarder
- F5: Calculer itin√©raire
- F9: Carte interactive

SUPPORT: Consultez la documentation compl√®te sur GitHub
"""

        guide_window = tk.Toplevel(self.root)
        guide_window.title("Guide d'utilisation")
        guide_window.geometry("600x500")

        text_widget = tk.Text(guide_window, wrap='word', padx=10, pady=10)
        text_widget.pack(fill='both', expand=True)
        text_widget.insert('1.0', guide_text)
        text_widget.configure(state='disabled')

    def show_shortcuts(self):
        """
        Affiche une bo√Æte de dialogue listant les raccourcis clavier disponibles.

        Cette fen√™tre liste les raccourcis pour les actions communes dans l'application,
        incluant fichier, √©dition, outils et navigation.
        """
        shortcuts = """RACCOURCIS CLAVIER VFR PLANNER

Fichier:
Ctrl+N         Nouveau projet
Ctrl+O         Ouvrir projet
Ctrl+S         Sauvegarder
Ctrl+Shift+S   Sauvegarder sous
Ctrl+Q         Quitter

√âdition:
Ctrl+C         Copier le plan de vol

Outils:
F5             Calculer l'itin√©raire
F9             Carte interactive

Navigation:
Tab            Basculer entre les champs
Ctrl+Tab       Changer d'onglet
√âchap          Annuler dialogue
"""
        messagebox.showinfo("Raccourcis clavier", shortcuts)

    def show_about(self):
        """
        Affiche une bo√Æte de dialogue "√Ä propos" avec les informations de version
        et description du logiciel.

        Montre la version, auteurs, fonctionnalit√©s principales et informations l√©gales.
        """
        about_text = f"""VFR PLANNER

Version: 0.1
Auteurs: Antoine Gingras, Matthew Meyer, Richard Nguekam, Gabriel Wong-Lapierre

Outil de planification de vol VFR avec calculs automatiques
de navigation, int√©gration m√©t√©o et g√©n√©ration de plans
de vol professionnels.

Projet MGA802-01 - √âcole de Technologie Sup√©rieure

Fonctionnalit√©s:
‚Ä¢ Base de donn√©es d'a√©roports compl√®te
‚Ä¢ Calculs de navigation pr√©cis avec vent
‚Ä¢ Int√©gration API m√©t√©o (Tomorrow.io) automatique
‚Ä¢ Export Excel et PDF professionnel
‚Ä¢ Cartes interactives
‚Ä¢ Interface intuitive

¬© 2025 - Projet √©ducatif
"""
        messagebox.showinfo("√Ä propos de VFR Planner", about_text)

    def on_closing(self):
        """
        G√®re la fermeture de l'application.

        Si des modifications non sauvegard√©es existent, demande √† l'utilisateur
        s'il souhaite sauvegarder avant de quitter. Peut annuler la fermeture.
        """
        if self.unsaved_changes:
            result = messagebox.askyesnocancel(
                "Fermeture",
                "Sauvegarder les modifications avant de quitter?"
            )
            if result is True:
                if not self.save_project():
                    return
            elif result is None:
                return

        self.root.destroy()
